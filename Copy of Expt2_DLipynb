{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1loQe9LwuT7tXUP_V8b-YCDYjwqhSk661","timestamp":1713886523788}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["And Gate"],"metadata":{"id":"wmzhgMBmlZCg"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LOeUsdTXkINo","executionInfo":{"status":"ok","timestamp":1713886065010,"user_tz":-330,"elapsed":396,"user":{"displayName":"Sakshi Thakare","userId":"03170749360661444864"}},"outputId":"0ef6be98-e65a-4675-d0c0-53c851f6998c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Input Vector : \n"," [[0 0]\n"," [0 1]\n"," [1 0]\n"," [1 1]]\n","Output : \n"," [0, 0, 0, 1]\n"]}],"source":["# Neural Network for AND function\n","import numpy as np\n","class and_NN:\n"," def __init__(self,iv):\n","  self.input_vector = np.array(iv)\n","  self.weight_vector = np.array([[-1.5,1,1]])\n","  self.output = np.array([])\n"," def compute(self):\n","  mfv = np.c_[np.ones(4),self.input_vector] # padding with bias\n","  result = mfv.dot(self.weight_vector.transpose()) # multipy\n","  self.output = [0 if r < 0 else 1 for r in result] # simple filter\n"," def show_result(self):\n","  print(\"Input Vector : \\n\",self.input_vector)\n","  print(\"Output : \\n\",self.output)\n"," def get_output(self):\n","  return self.output\n","n = and_NN(np.array([[0,0],[0,1],[1,0],[1,1]]))\n","n.compute()\n","n.show_result()"]},{"cell_type":"markdown","source":["OR gate"],"metadata":{"id":"BnrLQOZslbd2"}},{"cell_type":"code","source":["# Neural Network for OR function\n","import numpy as np\n","class or_NN:\n"," def __init__(self,iv):\n","  self.input_vector = np.array(iv)\n","  self.weight_vector = np.array([[-0.5,1,1]])\n","  self.output = np.array([])\n"," def compute(self):\n","  mfv = np.c_[np.ones(4),self.input_vector] # padding with bias\n","  result = mfv.dot(self.weight_vector.transpose()) # multipy\n","  self.output = [0 if r < 0 else 1 for r in result] # simple filter\n"," def show_result(self):\n","  print(\"Input Vector : \\n\",self.input_vector)\n","  print(\"Output : \\n\",self.output)\n"," def get_output(self):\n","  return self.output\n","n = or_NN(np.array([[0,0],[0,1],[1,0],[1,1]]))\n","n.compute()\n","n.show_result()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4PMzt9oXkLVS","executionInfo":{"status":"ok","timestamp":1713886173468,"user_tz":-330,"elapsed":515,"user":{"displayName":"Sakshi Thakare","userId":"03170749360661444864"}},"outputId":"66cc7053-14f1-4f4f-a008-14910fff6b24"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Input Vector : \n"," [[0 0]\n"," [0 1]\n"," [1 0]\n"," [1 1]]\n","Output : \n"," [0, 1, 1, 1]\n"]}]},{"cell_type":"code","source":["Nand Gate"],"metadata":{"id":"-iMlsoS8lemR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Neural Network for NAND function\n","import numpy as np\n","class nand_NN:\n"," def __init__(self,iv):\n","  self.input_vector = np.array(iv)\n","  self.weight_vector = np.array([[1.5,-1,-1]])\n","  self.output = np.array([])\n"," def compute(self):\n","  mfv = np.c_[np.ones(4),self.input_vector] # padding with bias\n","  result = mfv.dot(self.weight_vector.transpose()) # multipy\n","  self.output = [0 if r < 0 else 1 for r in result] # simple filter\n"," def show_result(self):\n","  print(\"Input Vector : \\n\",self.input_vector)\n","  print(\"Output : \\n\",self.output)\n"," def get_output(self):\n","  return self.output\n","n = nand_NN(np.array([[0,0],[0,1],[1,0],[1,1]]))\n","n.compute()\n","n.show_result()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PIivSK4Vk6xA","executionInfo":{"status":"ok","timestamp":1713886221192,"user_tz":-330,"elapsed":623,"user":{"displayName":"Sakshi Thakare","userId":"03170749360661444864"}},"outputId":"8a85efcb-be56-4b21-a7dd-365f4ffdf2a4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Input Vector : \n"," [[0 0]\n"," [0 1]\n"," [1 0]\n"," [1 1]]\n","Output : \n"," [1, 1, 1, 0]\n"]}]},{"cell_type":"code","source":["XOR gate"],"metadata":{"id":"cpGM3xxJlf94"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class xor_NN:\n"," def __init__(self,iv):\n","  self.input_vector = np.array(iv) # Input Layer\n","  self.output = np.array([])\n"," def compute(self):\n","  or_neuron = or_NN(self.input_vector) # Layer 1\n","  nand_neuron = nand_NN(self.input_vector) # Layer 1\n","  or_neuron.compute()\n","  nand_neuron.compute()\n","  h1 = or_neuron.get_output()\n","  h2 = nand_neuron.get_output()\n","  h = np.concatenate((h1,h2))\n","  iv_l2= h.reshape(4,2)\n","  and_neuron = and_NN(iv_l2) # Layer 2\n","  and_neuron.compute()\n","  self.output = and_neuron.get_output()\n"," def show_result(self):\n","  print(\"Input Vector : \\n\",self.input_vector)\n","  print(\"Output : \\n\",self.output)\n"," def get_output(self):\n","  return self.output\n","n = xor_NN(np.array([[0,0],[0,1],[1,0],[1,1]]))\n","n.compute()\n","n.show_result()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tj2BWv5hlL9h","executionInfo":{"status":"ok","timestamp":1713886295384,"user_tz":-330,"elapsed":807,"user":{"displayName":"Sakshi Thakare","userId":"03170749360661444864"}},"outputId":"ef74bf45-10f2-4f68-c9ef-9d5384b9599d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Input Vector : \n"," [[0 0]\n"," [0 1]\n"," [1 0]\n"," [1 1]]\n","Output : \n"," [0, 1, 1, 0]\n"]}]}]}